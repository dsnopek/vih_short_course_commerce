<?php
/**
 * @file
 * Code for the VIH Short Course Commerce feature.
 */

include_once('vih_short_course_commerce.features.inc');

/**
* Implements hook_admin_paths().
*/
function vih_short_course_commerce_admin_paths() {
  $paths = array(
    'node/*/registrations' => TRUE,
    'node/*/registrations/*' => TRUE,    
  );
  return $paths;
}

/**
 * Implementation of hook_form_FORMID_alter().
 */
function vih_short_course_commerce_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  // Make sure that one product display has been registered before starting on a registration for a new product display.
  $product_ids = vih_short_course_commerce_get_product_ids($form_state['context']['entity']);
  $cart_product_ids = vih_short_course_commerce_get_products_in_cart();
  $merged_ids = array_intersect($cart_product_ids, $product_ids);
  $is_cart_products_available = !empty($merged_ids);

  if ($is_cart_products_available === FALSE AND !empty($cart_product_ids)) {
    $form['pending_order_msg']['#markup'] = '<h2 id="add-to-cart-form-registration">' . t('Registration', array(), array('context' => 'vih-registration')) . '</h2><div class="info">' .
        t('You have already started a registration. Please finish that registration before proceding. ') . 
        l(t('Go to your current registration'), 'cart') . 
        '.</div>';
    $form['pending_order_msg']['#weight'] = -100;  
    $form['submit']['#value'] = t('Cannot sign up - please finish your other registration');
    $form['submit']['#disabled'] = TRUE;
  }
  elseif ($is_cart_products_available === TRUE AND !empty($cart_product_ids)) {
    $form['pending_order_msg']['#markup'] = '<h2 id="add-to-cart-form-registration">' . t('Registration', array(), array('context' => 'vih-registration')) . '</h2><div class="info">' .
        t('You already added some people. Add more or ') . 
        l(t('go to your registration'), 'cart') . 
        '.</div>';
    $form['pending_order_msg']['#weight'] = -100;
    $form['submit']['#value'] = t('Sign up');
  }
  else {
    $form['pending_order_msg']['#markup'] = '<h2 id="add-to-cart-form-registration">' . t('Registration', array(), array('context' => 'vih-registration')) . '</h2><p>' . t('You can register as many people as you like. Add one at a time using the form below.') . '</p>';
    $form['pending_order_msg']['#weight'] = -100;
    $form['submit']['#value'] = t('Sign up');
  }
  
  // Adding table with current people in the order.
  global $user;
  $order = commerce_cart_order_load($user->uid);
  if ($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $view = views_get_view('commerce_cart_summary');
    $view->set_arguments(array($order_wrapper->getIdentifier()));
    $view->hide_admin_links = TRUE;
    $form['current_order']['#markup'] = $view->preview();
    $form['current_order']['#weight'] = -99;
  }  

  // Add read only price field to add to cart form.
  if (isset($form_state['default_product']->commerce_price)){
    $price = commerce_product_calculate_sell_price($form_state['default_product']);
    $form['display_price'] = array(
      '#title' => t('Price'),
      '#type' => 'item',
      '#markup' => '<span class="display-price-amount">' . commerce_currency_format($price['amount'], $price['currency_code']) . '</span>',
      '#prefix' => '<div class="display-price">',
      '#suffix' => '</div>',
    );
  }

  // Kayak courses - add possiblity to rent a kayak.
  if ($form_state['context']['entity']->type = 'vih_short_course_kajak') {
  
    if (!empty($form_state['context']['entity']->field_rent_kayak)) {

      $form['rent_kayak'] = array(
        '#type' => 'fieldset',
        '#title' => t('Additional products'),
        '#weight' => 20,
      );

      // Only one possible kayak product due to limitations on the content type.
      $kayak_product_id = $form_state['context']['entity']->field_rent_kayak[LANGUAGE_NONE][0]['product_id'];
      $kayak_product = commerce_product_load($kayak_product_id);

      $price = commerce_product_calculate_sell_price($kayak_product);
      $price = ' (' . commerce_currency_format($price['amount'], $price['currency_code']) . ')';

      $options = array('none' => t('No, thanks'));
      $options[$kayak_product->product_id] = $kayak_product->title . ' <span class="kayak-price">'. $price . '</span>';

      $form['rent_kayak']['kayak'] = array(
        '#type' => 'radios',
        '#title' => t('Do you want to rent a kayak?'),
        '#options' => $options,
        '#default_value' => 'none',
        '#weight' => 20,
      );

      $options = array(
        '' => t('Choose'),
        'S' => t('Small'),
        'M' => t('Medium'),
        'L' => t('Large'),
        'XL' => t('X-Large'),        
      );

      $form['rent_kayak']['wetsuit_size'] = array(
        '#type' => 'radios',
        '#title' => t('Size for wetsuit'),
        '#options' => $options,
        '#default_value' => 'none',
        '#weight' => 25,
      );
      
      array_unshift($form['#submit'], 'vih_short_course_commerce_add_to_cart_form_submit_before');
      $form['#submit'][] = 'vih_short_course_commerce_add_to_cart_form_submit_after';
    }
  }
}

/**
 * Submit handler: empty out the current cart.
 */
function vih_short_course_commerce_add_to_cart_form_submit_before($form, &$form_state) {
  global $user;

  // Get the current cart content.
  $order = commerce_cart_order_load($user->uid);

  // Empty the cart before adding any new products.
  if (!empty($order)) {
    // Add some logic to ensure that the cart will not be filled up with rented kayaks.
  }
}

/**
 * Submit handler: add the products and redirect to the checkout page.
 */
function vih_short_course_commerce_add_to_cart_form_submit_after($form, &$form_state) {
  global $user;

  // Add any selected training.
  if (!empty($form_state['values']['kayak']) && is_numeric($form_state['values']['kayak']) && $form_state['values']['kayak'] != 'none') {
    commerce_cart_product_add_by_id($form_state['values']['kayak'], $form_state['values']['quantity'], FALSE, $user->uid);
  }

  // Redirect to the page.
  // $form_state['redirect'] = 'cart';
}

/**
 * Finds product IDs for the particular product display in the add to cart form
 *
 * @param
 *  An entity with a product field
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_product_ids($entity) {
  if (!empty($entity->field_golf_product[LANGUAGE_NONE])) {
    $products = $entity->field_golf_product[LANGUAGE_NONE];
  }
  elseif(!empty($entity->field_product[LANGUAGE_NONE])) {
    $products = $entity->field_product[LANGUAGE_NONE];
  }
  else {
    return array();
  }

  $ids = array();
  foreach ($products as $a) {
    $ids[] = $a['product_id'];
  }
  return $ids;
}

/**
 * Return the product_id values for all products in the cart
 *
 * @return
 *  An array of product ids
 */
function vih_short_course_commerce_get_products_in_cart() {
  $cart_product_ids = &drupal_static(__FUNCTION__);

  if (!isset($cart_product_ids)) {
    global $user;
    $cart_product_ids = array();
    $order = commerce_cart_order_load($user->uid);
    if ($order) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        $product_wrapper = $line_item_wrapper->commerce_product;
        $cart_product_ids[] = $product_wrapper->product_id->value();
      }
    }

    $cart_product_ids = array_unique($cart_product_ids);
  }

  return $cart_product_ids;
}

/**
 * Implements hook_views_default_views_alter(&$views).
 */
function vih_short_course_commerce_views_default_views_alter(&$views) {
  $display =& $views['commerce_cart_form']->display['default'];
  // Add the name field to the view.
  $display->display_options['fields']['field_registrant_name']['id'] = 'field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['table'] = 'field_data_field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['field'] = 'field_registrant_name';
  $display->display_options['fields']['field_registrant_name']['relationship'] = 'commerce_line_items_line_item_id';

  // Remove quantity field and unit price.
  unset($display->display_options['fields']['edit_quantity']);
  unset($display->display_options['fields']['commerce_unit_price']);  
}

